---
pagetitle: "A framework for cohort building in R: the CohortConstructor package for data mapped to the OMOP Common Data Model"
format:
  revealjs: 
    theme: [simple, style_theory.scss]
    incremental: true   
    slide-number: true
    chalkboard: true
    preview-links: auto
    margin: 0.07
    code-link: true
    code-line-numbers: false
    height: 900
    width: 1600
    footer: "R/Medicine 2025"
execute:
  echo: true
  eval: true
  warning: false
  output-width: 100%
editor: visual
engine: knitr
---

```{r, echo=FALSE}
options(width = 130)
```

# CohortConstructor {.title-slide}

A framework for cohort building in R: the CohortConstructor package for data mapped to the OMOP Common Data Model

::: title-slide-logos
<img src="logoCC.png" alt="Logo 1" class="logo"/> <img src="logoHDS.png" alt="Logo 2" class="logo"/> <img src="logoOHDSI.png" alt="Logo 3" class="logo"/>
:::



# ED PART 1


# Cohorts in OMOP {.title-slide}

## What Is a *Cohort*?

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

**A cohort is a set of persons who satisfy one or more inclusion criteria for a duration of time.**

-   Cohorts are defined by sets of **clinical codes**, and specific **logic** that defines cohort *inclusion*, *entry* and *exit*.

-   No distinction between inclusion and exclusion criteria. *All criteria are formulated as inclusion criteria.*

-   An individual can contribute to the cohort multiple times, but these **cannot overlap**. That is, a person can not re-enter the cohort before leaving it.

-   Individuals must be **in observation while** contributing time to the cohort.

## OMOP Cohorts in R

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

-   The `<cohort_table>` class is defined in the R package `omopgenerics`.

-   This is the class that `CohortConstructor` uses, as well as other OMOP analytical packages.

-   As defined in `omopgenerics`, a `<cohort_table>` must have at least the following 4 columns (without any missing values in them):

    -   **cohort_definition_id**: Unique identifier for each cohort in the table.
  
    -   **subject_id**: Unique patient identifier.
  
    -   **cohort_start_date**: Date when the person enters the cohort.
  
    -   **cohort_end_date**: Date when the person exits the cohort.

## OMOP Cohorts in R
![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}


```{r, echo=FALSE}
library(CDMConnector)
library(CodelistGenerator)
library(CohortConstructor)
library(CohortCharacteristics)
library(dplyr)

con <- DBI::dbConnect(duckdb::duckdb(), dbdir = eunomiaDir())
cdm <- cdmFromCon(
  con, 
  cdmSchema = "main", 
  writeSchema = "main",
  writePrefix = "my_study_"
)

cdm$cohort <- conceptCohort(
  cdm = cdm, 
  conceptSet = list("viral_sinusitis" = 40481087L, "viral_pharyngitis" = 4112343L), 
  name = "cohort"
)
```

```{r}
cdm$cohort
```

## OMOP Cohorts in R{.nonincremental}

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

Additionally, the `<cohort_table>` object has the follwing **attributes**:


-   **Settings**: Relate each cohort definition ID with a cohort name and other variables that define the cohort.

. . .

```{r}
settings(cdm$cohort)
```

## OMOP Cohorts in R{.nonincremental}

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

-   **Attrition**: Store information on each inclusion criteria applied and how many records and subjects were kept after.

. . .

```{r}
attrition(cdm$cohort)
```



## OMOP Cohorts in R{.nonincremental}

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

- **Cohort count**: Number of records and subjects for each cohort.

. . .

```{r}
cohortCount(cdm$cohort)
```

## OMOP Cohorts in R{.nonincremental}

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

- **Cohort codelist**: Codelists used to define entry events and inclusion criteria for each cohort.

. . .

```{r}
attr(cdm$cohort, "cohort_codelist")
```



# CohortConstructor {.title-slide}

An R package to build and curate cohorts in the OMOP Common Data Model


## Introduction

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

-   CohortConstructor package is designed to support cohort building pipelines in R, using data mapped to the OMOP Common Data Model.

::: {style="margin-bottom: 10px;"}
:::

-   The code is publicly available in OHDSI's GitHub repository [CohortConstructor](https://github.com/OHDSI/CohortConstructor).

::: {style="margin-bottom: 10px;"}
:::

-   CohortConstructor v0.4.0 is available in [CRAN](https://cran.r-project.org/web/packages/CohortConstructor/CohortConstructor.pdf){.link}.

::: {style="margin-bottom: 10px;"}
:::

-   Vignettes with further information can be found in the package [website](https://ohdsi.github.io/CohortConstructor/index.html){.link}.

::: {style="margin-bottom: 10px;"}
:::

-   More information and context can be found in the online book "[Tidy R programming with databases: applications with the OMOP common data model](https://oxford-pharmacoepi.github.io/Tidy-R-programming-with-OMOP/){.link}".

## CohortConstructor pipeline

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

. . .

::: {style="margin-bottom: 15px;"}
:::

**1) Create base cohorts** 

Cohorts defined using clinical concepts (e.g., asthma diagnoses) or demographics (e.g., females aged \>18)

. . .

::: {style="margin-bottom: 25px;"}
:::

**2) Cohort-curation** 

Tranform base cohorts to meet study-specific inclusion criteria.

::: {style="margin-bottom: 25px;"}
:::





## Function Sets

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

:::::::::::::: columns
::: {.column width="5%"}
:::

:::::: {.column width="40%"}
::::: bulletbox
:::: {.fragment .fade-in-then-semi-out}
::: {layout="[[-1], [1], [-1]]"}
**Base cohorts** *Cohort construction based on clinical concepts or demographics.*
:::
::::
:::::
::::::

::: {.column width="5%"}
:::

:::::: {.column width="40%"}
::::: bulletbox
:::: {.fragment .fade-in-then-semi-out}
::: {layout="[[-1], [1], [-1]]"}
**Requirements and Filtering** *Demographic restrictions, event presence/absence conditions, and filtering specific records.*
:::
::::
:::::
::::::

::: {.column width="5%"}
:::
::::::::::::::

:::::::::::::: columns
::: {.column width="5%"}
:::

:::::: {.column width="40%"}
::::: bulletbox
:::: {.fragment .fade-in-then-semi-out}
::: {layout="[[-1], [1], [-1]]"}
**Update cohort entry and exit** *Adjusting entry and exit dates to align with study periods, observation windows, or key events.*
:::
::::
:::::
::::::

::: {.column width="5%"}
:::

:::::: {.column width="40%"}
::::: bulletbox
:::: {.fragment .fade-in-then-semi-out}
::: {layout="[[-1], [1], [-1]]"}
**Transformation and Combination** *Merging, stratifying, collapsing, matching, or intersecting cohorts.*
:::
::::
:::::
::::::

::: {.column width="5%"}
:::
::::::::::::::


# Base cohorts

## Functions to build base cohorts

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

::: {style="margin-bottom: 25px;"}
:::

-   `demographicsCohort()`

::: {style="margin-bottom: 10px;"}
:::

-   `conceptCohort()`

::: {style="margin-bottom: 10px;"}
:::

-   `measurementCohort()`

::: {style="margin-bottom: 10px;"}
:::

-   `deathCohort()`

## Get Started: connecto to Eunomia

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

::: {style="margin-bottom: 15px;"}
:::


```{r}
# Load relevant packages
library(CDMConnector)
library(CodelistGenerator)
library(CohortConstructor)
library(CohortCharacteristics)
library(dplyr)
```


```{r}
# Download Eunomia 
if (Sys.getenv("EUNOMIA_DATA_FOLDER") == ""){
  Sys.setenv("EUNOMIA_DATA_FOLDER" = file.path(tempdir(), "eunomia"))}
if (!dir.exists(Sys.getenv("EUNOMIA_DATA_FOLDER"))){ dir.create(Sys.getenv("EUNOMIA_DATA_FOLDER"))
  CDMConnector::downloadEunomiaData()  
}

# Connect to the "database"
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = eunomiaDir())
# Create CDM reference object
cdm <- cdmFromCon(
  con, 
  cdmSchema = "main", 
  writeSchema = "main",
  writePrefix = "my_study_"
)
```

## Demographics based - Example

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

::: {style="margin-bottom: 15px;"}
:::

- Two cohorts, females and males, both aged 18 to 60 years old, with at least 365 days of previous observation in the database.

. . .


```{r}
cdm$age_cohort <- demographicsCohort(
  cdm = cdm, 
  ageRange = c(18, 60), 
  sex = c("Female", "Male"),
  minPriorObservation = 365,
  name = "age_cohort"
)

settings(cdm$age_cohort)
```

## Demographics based - Example

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

::: {style="margin-bottom: 20px;"}
:::

```{r}
cohortCount(cdm$age_cohort)
```

::: {style="margin-bottom: 20px;"}
:::

. . .

```{r}
attrition(cdm$age_cohort)
```

## Demographics based - Example

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

::: {style="margin-bottom: 20px;"}
:::

To better visualise the **attrition**, we can use the package `CohortCharacteristics` to either create a **flow diagram** or a **formatted table**:

```{r}
cdm$age_cohort |> summariseCohortAttrition() |> plotCohortAttrition(type = "png")
```


## Demographics based - Example

::: {style="margin-bottom: 20px;"}
:::

```{r}
cdm$age_cohort |> summariseCohortAttrition() |> tableCohortAttrition()
```


## Concept based - Example {.incremental:FALSE}

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

::: {style="margin-bottom: 20px;"}
:::

. . . 

Let's create a cohort of medications that contains two drugs: diclofenac, and acetaminophen.

::: {style="margin-bottom: 10px;"}
:::

1)  Get relevant codelists with `CodelistGenerator`

. . .

```{r}
drug_codes <- getDrugIngredientCodes(
  cdm = cdm, 
  name = c("diclofenac", "acetaminophen"),
  nameStyle = "{concept_name}"
)
drug_codes
```

## Concept based - Example {.incremental:FALSE}

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}


2)  Create concept based cohorts

. . .

```{r}
cdm$medications <- conceptCohort(
  cdm = cdm, 
  conceptSet = drug_codes, 
  name = "medications"
)

settings(cdm$medications)
```

## Concept based - Example

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

::: {style="margin-bottom: 15px;"}
:::

-   Attrition

. . .

```{r, echo=FALSE}
result <- cdm$medications |> 
  summariseCohortAttrition() 
result |> 
  tableCohortAttrition(
  groupColumn = c("cohort_name"),
  hide = c("variable_level", "reason_id", "estimate_name", "cdm_name", settingsColumns(result))
)
```

## Concept based - Example

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

::: {style="margin-bottom: 15px;"}
:::

-   Cohort codelist as an attribute

. . .

```{r}
attr(cdm$medications, "cohort_codelist")
```

# Requirements and Filtering

## Functions to apply requirements and filter

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

::: {style="margin-bottom: 10px;"}
:::

::::::: columns
:::: {.column width="50%"}
-   On demographics

    -   `requireDemographics()`
    
    -   `requireAge()`
    
    -   `requireSex()`
    
    -   `requirePriorObservation()`
    
    -   `requireFutureObservation()`

::: {style="margin-bottom: 10px;"}
:::

-   On cohort entries

    -   `requireIsFirstEntry()`
    
    -   `requireIsLastEntry()`
    
    -   `requireIsEntry()`
::::

:::: {.column width="50%"}
-   Require presence or absence based on other cohorts, concepts, and tables

    -   `requireCohortIntersect()`
    
    -   `requireConceptIntersect()`
    
    -   `requireTableIntersect()`


::: {style="margin-bottom: 10px;"}
:::

-   Other

    -   `requireInDateRange()`
    
    -   `requireMinCohortCount()`
::::
:::::::

## Requirement functions - Example

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

::: {style="margin-bottom: 10px;"}
:::

-   We can apply different inclusion and exclusion criteria using CohortConstructor's functions in a pipe-line fashion. For instance, in what follows we require

    -   only first record per person
    
    -   subjects 18 years old or more at cohort start date
    
    -   only females
    
    -   at least 30 days of prior observation at cohort start date

. . .

```{r}
cdm$medications_requirement <- cdm$medications %>% 
  requireIsFirstEntry(name = "medications_requirement") %>% 
  requireDemographics(
    ageRange = list(c(18, 150)),
    sex = "Female", 
    minPriorObservation = 30
  )
```

## Requirement functions - Example

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

::: {style="margin-bottom: 10px;"}
:::

**Attrition**

```{r, echo=FALSE}
result <- cdm$medications_requirement |> 
  summariseCohortAttrition(cohortId = 1) 
result |> 
  tableCohortAttrition(
  groupColumn = c("cohort_name"),
  hide = c("variable_level", "reason_id", "estimate_name", "cdm_name", settingsColumns(result))
)
```

# Update cohort entry and exit

## Functions to update cohort start and end dates

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

::: {style="margin-bottom: 10px;"}
:::

::::::: columns
:::: {.column width="50%"}
-   Cohort exit

    -   `exitAtObservationEnd()`
    
    -   `exitAtDeath()`
    
    -   `exitAtFirstDate()`
    
    -   `exitAtLastDate()`

::: {style="margin-bottom: 10px;"}
:::

-   Cohort entry

    -   `entryAtFirstDate()`
    
    -   `entryAtLastDate()`
::::

:::: {.column width="50%"}
-   Trim start and end dates

    -   `trimDemographics()`
    
    -   `trimToDateRange()`

::: {style="margin-bottom: 10px;"}
:::

-   Pad start and end dates

    -   `padCohortDate()`
    
    -   `padCohortEnd()`
    
    -   `padCohortStart()`
::::
:::::::


## Update cohort entry and exit - Example

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

::: {style="margin-bottom: 10px;"}
:::

- We can trim start and end dates to match demographic requirements. 

- For instance cohort dates can be trimmed so the subject contributes time while:

    - Aged 20 to 40 years old
    
    - Prior observation of at least 365 days

. . .

```{r}
cdm$medications_trimmed <- cdm$medications %>%
  trimDemographics(
    ageRange = list(c(20, 40)),
    minPriorObservation = 365,
    name = "medications_trimmed"
  )
```

## Update cohort entry and exit - Example
![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

::: {style="margin-bottom: 10px;"}
:::


```{r}
result <- cdm$medications_trimmed |> 
  summariseCohortAttrition(cohortId = 1) 
result |> 
  tableCohortAttrition(
  groupColumn = c("cohort_name"),
  hide = c("variable_level", "reason_id", "estimate_name", "cdm_name", settingsColumns(result))
)
```


# Transformation and Combination

## Functions for Cohort Transformation and Combination

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

::::::::: columns
::::: {.column width="50%"}
-   Split cohorts

    -   `yearCohorts()`
    
    -   `stratifyCohorts()`

::: {style="margin-bottom: 10x;"}
:::

-   Combine cohorts

    -   `unionCohorts()`
    
    -   `intersectCohorts()`

::: {style="margin-bottom: 10x;"}
:::

-   Filter cohorts

    -   `subsetCohorts()`
    
    -   `sampleCohorts()`
:::::

::::: {.column width="50%"}
-   Match cohorts

    -   `matchCohorts()`    

::: {style="margin-bottom: 10x;"}
:::

-   Concatenate entries

    -   `collapseCohorts()`

::: {style="margin-bottom: 10px;"}
:::

-   Copy and rename cohorts

    -   `renameCohort()`
    
    -   `copyCohorts()`
:::::
:::::::::

## Cohort combinations - Example

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

::: {style="margin-bottom: 10px;"}
:::

**1) Collapse** entries of acetaminophen and diclofenac, so if the gap is 7 days or less, entries are merged.

. . .

![](collapse.png)


## Cohort combinations - Example

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

::: {style="margin-bottom: 10px;"}
:::

**2)** Create a new cohort that contains people who had an exposure to both **diclofenac and acetaminophen** at the same time using.

. . .

![](intersect.png)


## Cohort combinations - Example

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

::: {style="margin-bottom: 10px;"}
:::

```{r}
cdm$intersection <- cdm$medications |>
  collapseCohorts(gap = 7) |>
  CohortConstructor::intersectCohorts(
    gap = 7,
    name = "intersection"
  )

settings(cdm$intersection)
```

## Cohort combinations - Example

![](logoCC.png){.absolute right="70px" top="0px" width="65" height="70"} ![](logoOHDSI.png){.absolute right="0px" top="0px" width="65" height="70"}

::: {style="margin-bottom: 10px;"}
:::

```{r}
attr(cdm$intersection, "cohort_codelist")
```



# ED PART 2


# Thank you! {.title-slide}

**Questions?**

::: title-slide-logos
<img src="logoCC.png" alt="Logo 1" class="logo"/> <img src="logoHDS.png" alt="Logo 2" class="logo"/> <img src="logoOHDSI.png" alt="Logo 3" class="logo"/>
:::


# Exercises

## Exercise 1 - Base Cohorts

**Create a cohort of aspirin use.** 

- *How many records does it have? And how many subjects?*

. . .

```{r, echo=FALSE}
aspirin <- getDrugIngredientCodes(cdm = cdm, name  = "aspirin", nameStyle = "{concept_name}")
cdm$aspirin <- conceptCohort(cdm = cdm, conceptSet = aspirin, name = "aspirin")
summariseCohortCount(cdm$aspirin) |> tableCohortCount()
```


## Exercise 2 - Requirement and filtering

**Create a new cohort named "aspirin_last" by applying the following criteria to the base aspirin cohort:**

- Include only the **last** drug exposure for each subject.

- Include exposures that **start between** January 1, 1960, and December 31, 1979.

- **Exclude** individuals with an amoxicillin exposure in the 7 days prior to the aspirin exposure.

. . .

*Move to the next slide to see the attrition.*

## Exercise 2 - Requirement and filtering

```{r, echo=FALSE}
amoxicillin <- getDrugIngredientCodes(cdm = cdm, name  = "amoxicillin", nameStyle = "{concept_name}")
cdm$aspirin_last <- cdm$aspirin |>
  requireIsLastEntry(name = "aspirin_last") |>
  requireInDateRange(dateRange = as.Date(c("1960-01-01", "1979-12-31"))) |>
  requireConceptIntersect(
    conceptSet = amoxicillin,
    window = list(c(-7, 0)),
    intersections = 0
  )
summariseCohortAttrition(cdm$aspirin_last) |> tableCohortAttrition()
```


## Exercise 3 - Update cohort entry and exit

**Create a cohort of ibuprofen. From it, create an "ibuprofen_death" cohort which includes only subjects that have a future record of death in the database, and update cohort end date to be the death date.**

. . .

```{r, echo=FALSE}
ibuprofen <- getDrugIngredientCodes(cdm = cdm, name  = "ibuprofen", nameStyle = "{concept_name}")
cdm$ibuprofen <- conceptCohort(cdm = cdm, conceptSet = ibuprofen, name = "ibuprofen")
cdm$ibuprofen_death <- cdm$ibuprofen %>% 
  exitAtDeath(requireDeath = TRUE, name = "ibuprofen_death")
summariseCohortAttrition(cdm$ibuprofen_death) |> tableCohortAttrition()
```


## Exercise 4 - Transformation and Combination

**From the ibuprofen base cohort (not subseted to death), create five separate cohorts. Each cohort should include records for one specific year from the following list: 1975, 1976, 1977, 1978, 1979, and 1980.**

. . .

- *How many records and subjects are in each cohort?*

. . .

```{r, echo=FALSE}
cdm$ibuprofen_years <- cdm$ibuprofen |>
  yearCohorts(years = 1975:1980, name = "ibuprofen_years")
summariseCohortCount(cdm$ibuprofen_years) |> tableCohortCount()
```


## Exercise 5 

**Use CohortConstructor to create a cohort with the following criteria:**

- **Users of diclofenac**

- **Females aged 16 or older**

- **With at least 365 days of continuous observation prior to exposure**

- **Without prior exposure to any of amoxicillin**

- **With cohort exit defined as first discontinuation of exposure. An exposure being define as recorded exposures within 7-days gap.**

## Exercise 5 

```{r, echo=FALSE}
amoxicillin <- getDrugIngredientCodes(
  cdm = cdm, 
  name  = c("amoxicillin"), 
  nameStyle = "{concept_name}"
)
diclofenac <- getDrugIngredientCodes(
  cdm = cdm, 
  name  = "diclofenac", 
  nameStyle = "{concept_name}"
)
cdm$diclofenac <- conceptCohort(
  cdm = cdm, 
  conceptSet = diclofenac, 
  name = "diclofenac"
) |>
  requireDemographics(
    sex = "Female",
    ageRange = list(c(16, 150)), 
    minPriorObservation = 365
  ) |>
  requireConceptIntersect(
    conceptSet = amoxicillin,
    window = list(c(-Inf, -1)),
    intersections = 0
  ) |>
  collapseCohorts(gap = 7) |>
  requireIsFirstEntry()

summariseCohortAttrition(cdm$diclofenac) |> tableCohortAttrition()
```
